"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.
"""


class EvenFibSeries:
    def fibseries(self):
        sum = 0
        a = 0
        b = 1
        while sum < 4000000:
            sum = a + b
            a = b
            b = sum
        return sum


ans = EvenFibSeries()
print(ans.fibseries())


"""
1 1 2 3 5 8 13 21 34 55 89 144
It is easy to prove that every third Fibonacci number is even.

limit=4000000
sum=0
a=1
b=1
c=a+b
while c<limit
    sum=sum+c
    a=b+c
    b=c+a
    c=a+b
output sum

or better way is
If we only write the even numbers:
2 8 34 144...
it seems that they obey the following recursive relation: E(n)=4*E(n-1)+E(n-2).
If we can prove that for the Fibonacci numbers the formula F(n)=4*F(n-3)+F(n-6) holds we
have proven this recursion
"""
